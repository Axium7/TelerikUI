<TelerikButton OnClick="AutoFitAllColumns">AutoFit All Columns</TelerikButton>

<TelerikGrid @ref="@GridRef"
             Data="@Generators"
             Pageable="true"
             Sortable="true"
             FilterMode="GridFilterMode.FilterMenu"
             Resizable="true"
             Reorderable="true">

    <GridToolBarTemplate>
        <GridCommandButton Command="ExcelExport" Icon="@SvgIcon.FileExcel">Export to Excel</GridCommandButton>
        <label class="k-checkbox-label"><TelerikCheckBox @bind-Value="@blnExportAllPages" />Export All Pages</label>
    </GridToolBarTemplate>

    <GridExport>
        <GridExcelExport FileName="@strExcelFileName" AllPages="@blnExportAllPages"
                         OnBeforeExport="@(()=> { strExcelFileName=CreateExcelFileName(); } )" />
    </GridExport>

    <GridColumns>
        <GridColumn Field="@nameof(ModtblGenerator.GenNum)" Title="Gen Number" />
        <GridColumn Field="@nameof(ModtblGenerator.GenName)" Title="Generator Name" />
        <GridColumn Field="@nameof(ModtblGenerator.Street)" Title="Street" />
        <GridColumn Field="@nameof(ModtblGenerator.City)" Title="City" />
        <GridColumn Field="@nameof(ModtblGenerator.Province)" Title="Province" />
        <GridColumn Field="@nameof(ModtblGenerator.Country)" Title="Country" />
        <GridColumn Field="@nameof(ModtblGenerator.PostalCode)" Title="Postal Code" />
        <GridColumn Field="@nameof(ModtblGenerator.WasteClasses)" Title="Waste Classes" Filterable="false" />
    </GridColumns>
</TelerikGrid>

@code {

    [Parameter]
    public List<ModtblGenerator> Generators { get; set; }

    [Parameter]
    public string StrFirstChars { get; set; }

    TelerikGrid<ModtblGenerator> GridRef { get; set; }
    string strExcelFileName = "excelfile";
    bool blnExportAllPages = true;

    string CreateExcelFileName()
    {
        return $"GeneratorSearch_{StrFirstChars}_{DateTime.Now.ToString("MMMM_dd_yyyy")}";
    }

    private async Task AutoFitAllColumns()
    {
        await GridRef.AutoFitAllColumnsAsync();
    }

}
