@using Telerik.DataSource;
@using Telerik.DataSource.Extensions

<TelerikGrid @ref="@GridRef"
             OnRead="@OnGridRead"
             TItem="ModtblGenerator"
             Pageable="true"
             Sortable="true"
             FilterMode="GridFilterMode.FilterMenu"
             Resizable="true"
             Reorderable="true"
             OnRowRender="@OnRowRender"
>
    @*  **************************************** Tool Bar **************************************** *@
    <GridToolBarTemplate>

        @* ******** Excel Button *@
        <GridCommandButton Command="ExcelExport" Icon="@SvgIcon.FileExcel">Export to Excel</GridCommandButton>

        @* ******** AutoFill Button *@
        <TelerikButton OnClick="AutoFitAllColumns">AutoFit All Columns</TelerikButton>

        @* ******** Clear All filters Button *@
        <TelerikButton ThemeColor="primary" OnClick="@ClearGridFilter">Clear Filters</TelerikButton>

    </GridToolBarTemplate>

    <GridExport>
        <GridExcelExport FileName="@strExcelFileName" AllPages="true"
                         OnBeforeExport="@(()=> { strExcelFileName=CreateExcelFileName(); } )" />
    </GridExport>

    @*  **************************************** Columns **************************************** *@

    <GridColumns>
        @* Gen Number is a HyperLink to the Generator Details Page *@
        <GridColumn Field="@nameof(ModtblGenerator.GenName)" Title="Generator Name" HeaderClass="header" />
        <GridColumn Field="@nameof(ModtblGenerator.GenNum)" Title="Gen Number" HeaderClass="header" />
        <GridColumn Field="@nameof(ModtblGenerator.Street)" Title="Street" HeaderClass="header" />
        <GridColumn Field="@nameof(ModtblGenerator.City)" Title="City" HeaderClass="header" />
        <GridColumn Field="@nameof(ModtblGenerator.Province)" Title="Province" HeaderClass="header" />
        <GridColumn Field="@nameof(ModtblGenerator.WasteClasses)" Title="Waste Classes" HeaderClass="header" Filterable="false"/>

    </GridColumns>
</TelerikGrid>

@code {

    [Parameter]
    public List<ModtblGenerator> Generators { get; set; }

    [Parameter]
    public string FirstChars { get; set; }

    TelerikGrid<ModtblGenerator> GridRef { get; set; }

    string strExcelFileName = "excelfile";

    string CreateExcelFileName()
    {
        return $"GeneratorSearch_{FirstChars}_{DateTime.Now.ToString("MMMM_dd_yyyy")}";
    }

    private async Task AutoFitAllColumns()
    {
        if (GridRef != null)
        {
            await GridRef.AutoFitAllColumnsAsync();
        }
    }

    private async Task ClearGridFilter()
    {
        GridState<ModtblGenerator> desiredState = new GridState<ModtblGenerator>()
            {
                //clears the filter list in the new Grid state
                FilterDescriptors = new List<IFilterDescriptor>()
            };

        await GridRef.SetStateAsync(desiredState);
    }

    private async Task OnGridRead(GridReadEventArgs args)
    {
        await Task.Delay(100); // simulate async operation
        DataSourceResult result = Generators.ToDataSourceResult(args.Request);

        args.Data = result.Data;
        args.Total = result.Total;
        args.AggregateResults = result.AggregateResults;

    }

    // **************************** Grid Styling ****************************

    // apply ellipsis to all columns
    private void OnRowRender(GridRowRenderEventArgs args)
    {
        args.Class = "custom-ellipsis";
    }

}

<style>
    .header {
        font-weight: bold;
        color: black;
    }
    /* OnRowRender */
    .k-grid tr.custom-ellipsis .k-table-td {
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }
</style>